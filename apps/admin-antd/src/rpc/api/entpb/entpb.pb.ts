// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: entpb/entpb.proto

/* eslint-disable */
import { type Empty } from "../google/protobuf/empty.pb";

/** Code generated by entproto. DO NOT EDIT. */

export interface Department {
  id: number;
  status: number;
  name: string | null;
  ancestors: string | null;
  leader: string | null;
  phone: string | null;
  email: string | null;
  remark: string | null;
  parentId: number | null;
  parent: Department | null;
  child: Department[];
  users: User[];
}

export interface CreateDepartmentRequest {
  department: Department | null;
}

export interface GetDepartmentRequest {
  id: number;
  view: GetDepartmentRequest_View;
}

export enum GetDepartmentRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface UpdateDepartmentRequest {
  department: Department | null;
}

export interface DeleteDepartmentRequest {
  id: number;
}

export interface ListDepartmentRequest {
  pageSize: number;
  pageToken: string;
  view: ListDepartmentRequest_View;
}

export enum ListDepartmentRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface ListDepartmentResponse {
  departmentList: Department[];
  nextPageToken: string;
}

export interface BatchCreateDepartmentsRequest {
  requests: CreateDepartmentRequest[];
}

export interface BatchCreateDepartmentsResponse {
  departments: Department[];
}

export interface Menu {
  id: number;
  sort: number;
  parentId: number | null;
  menuLevel: number;
  menuType: number;
  path: string | null;
  name: string;
  redirect: string | null;
  component: string | null;
  disabled: boolean | null;
  serviceName: string | null;
  permission: string | null;
  title: string;
  icon: string;
  hideMenu: boolean | null;
  hideBreadcrumb: boolean | null;
  ignoreKeepAlive: boolean | null;
  hideTab: boolean | null;
  frameSrc: string | null;
  carryParam: boolean | null;
  hideChildrenInMenu: boolean | null;
  affix: boolean | null;
  dynamicLevel: number | null;
  realPath: string | null;
  roles: Role[];
  parent: Menu | null;
  child: Menu[];
}

export interface CreateMenuRequest {
  menu: Menu | null;
}

export interface GetMenuRequest {
  id: number;
  view: GetMenuRequest_View;
}

export enum GetMenuRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface UpdateMenuRequest {
  menu: Menu | null;
}

export interface DeleteMenuRequest {
  id: number;
}

export interface ListMenuRequest {
  pageSize: number;
  pageToken: string;
  view: ListMenuRequest_View;
}

export enum ListMenuRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface ListMenuResponse {
  menuList: Menu[];
  nextPageToken: string;
}

export interface BatchCreateMenusRequest {
  requests: CreateMenuRequest[];
}

export interface BatchCreateMenusResponse {
  menus: Menu[];
}

export interface Position {
  id: number;
  name: string;
  code: string;
  remark: string | null;
  users: User[];
}

export interface CreatePositionRequest {
  position: Position | null;
}

export interface GetPositionRequest {
  id: number;
  view: GetPositionRequest_View;
}

export enum GetPositionRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface UpdatePositionRequest {
  position: Position | null;
}

export interface DeletePositionRequest {
  id: number;
}

export interface ListPositionRequest {
  pageSize: number;
  pageToken: string;
  view: ListPositionRequest_View;
}

export enum ListPositionRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface ListPositionResponse {
  positionList: Position[];
  nextPageToken: string;
}

export interface BatchCreatePositionsRequest {
  requests: CreatePositionRequest[];
}

export interface BatchCreatePositionsResponse {
  positions: Position[];
}

export interface Role {
  id: number;
  status: number;
  name: string;
  code: string;
  defaultRouter: string;
  remark: string;
  sort: number;
  menus: Menu[];
  users: User[];
}

export interface CreateRoleRequest {
  role: Role | null;
}

export interface GetRoleRequest {
  id: number;
  view: GetRoleRequest_View;
}

export enum GetRoleRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface UpdateRoleRequest {
  role: Role | null;
}

export interface DeleteRoleRequest {
  id: number;
}

export interface ListRoleRequest {
  pageSize: number;
  pageToken: string;
  view: ListRoleRequest_View;
}

export enum ListRoleRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface ListRoleResponse {
  roleList: Role[];
  nextPageToken: string;
}

export interface BatchCreateRolesRequest {
  requests: CreateRoleRequest[];
}

export interface BatchCreateRolesResponse {
  roles: Role[];
}

export interface Street {
  id: string;
  name: string;
  code: string;
  address: string;
}

export interface CreateStreetRequest {
  street: Street | null;
}

export interface GetStreetRequest {
  id: string;
  view: GetStreetRequest_View;
}

export enum GetStreetRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface UpdateStreetRequest {
  street: Street | null;
}

export interface DeleteStreetRequest {
  id: string;
}

export interface ListStreetRequest {
  pageSize: number;
  pageToken: string;
  view: ListStreetRequest_View;
}

export enum ListStreetRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface ListStreetResponse {
  streetList: Street[];
  nextPageToken: string;
}

export interface BatchCreateStreetsRequest {
  requests: CreateStreetRequest[];
}

export interface BatchCreateStreetsResponse {
  streets: Street[];
}

export interface SysApi {
  id: number;
  path: string;
  description: string;
  apiGroup: string;
  serviceName: string;
  method: string;
  isRequired: boolean;
}

export interface CreateSysApiRequest {
  sysApi: SysApi | null;
}

export interface GetSysApiRequest {
  id: number;
  view: GetSysApiRequest_View;
}

export enum GetSysApiRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface UpdateSysApiRequest {
  sysApi: SysApi | null;
}

export interface DeleteSysApiRequest {
  id: number;
}

export interface ListSysApiRequest {
  pageSize: number;
  pageToken: string;
  view: ListSysApiRequest_View;
}

export enum ListSysApiRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface ListSysApiResponse {
  sysApiList: SysApi[];
  nextPageToken: string;
}

export interface BatchCreateSysApisRequest {
  requests: CreateSysApiRequest[];
}

export interface BatchCreateSysApisResponse {
  sysApis: SysApi[];
}

export interface User {
  id: number;
  status: number;
  username: string;
  password: string;
  nickname: string;
  description: string | null;
  homePath: string;
  mobile: string | null;
  email: string | null;
  avatar: string | null;
  departmentId: number | null;
  authority: string | null;
  gender: string | null;
  departments: Department | null;
  positions: Position[];
  roles: Role[];
}

export interface CreateUserRequest {
  user: User | null;
}

export interface GetUserRequest {
  id: number;
  view: GetUserRequest_View;
}

export enum GetUserRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface UpdateUserRequest {
  user: User | null;
}

export interface DeleteUserRequest {
  id: number;
}

export interface ListUserRequest {
  pageSize: number;
  pageToken: string;
  view: ListUserRequest_View;
}

export enum ListUserRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface ListUserResponse {
  userList: User[];
  nextPageToken: string;
}

export interface BatchCreateUsersRequest {
  requests: CreateUserRequest[];
}

export interface BatchCreateUsersResponse {
  users: User[];
}

export interface Village {
  id: string;
  name: string;
  code: string;
  streets: Street[];
}

export interface CreateVillageRequest {
  village: Village | null;
}

export interface GetVillageRequest {
  id: string;
  view: GetVillageRequest_View;
}

export enum GetVillageRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface UpdateVillageRequest {
  village: Village | null;
}

export interface DeleteVillageRequest {
  id: string;
}

export interface ListVillageRequest {
  pageSize: number;
  pageToken: string;
  view: ListVillageRequest_View;
}

export enum ListVillageRequest_View {
  VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED",
  BASIC = "BASIC",
  WITH_EDGE_IDS = "WITH_EDGE_IDS",
}

export interface ListVillageResponse {
  villageList: Village[];
  nextPageToken: string;
}

export interface BatchCreateVillagesRequest {
  requests: CreateVillageRequest[];
}

export interface BatchCreateVillagesResponse {
  villages: Village[];
}

export interface DepartmentService {
  Create(request: CreateDepartmentRequest): Promise<Department>;
  Get(request: GetDepartmentRequest): Promise<Department>;
  Update(request: UpdateDepartmentRequest): Promise<Department>;
  Delete(request: DeleteDepartmentRequest): Promise<Empty>;
  List(request: ListDepartmentRequest): Promise<ListDepartmentResponse>;
  BatchCreate(request: BatchCreateDepartmentsRequest): Promise<BatchCreateDepartmentsResponse>;
}

export interface MenuService {
  Create(request: CreateMenuRequest): Promise<Menu>;
  Get(request: GetMenuRequest): Promise<Menu>;
  Update(request: UpdateMenuRequest): Promise<Menu>;
  Delete(request: DeleteMenuRequest): Promise<Empty>;
  List(request: ListMenuRequest): Promise<ListMenuResponse>;
  BatchCreate(request: BatchCreateMenusRequest): Promise<BatchCreateMenusResponse>;
}

export interface PositionService {
  Create(request: CreatePositionRequest): Promise<Position>;
  Get(request: GetPositionRequest): Promise<Position>;
  Update(request: UpdatePositionRequest): Promise<Position>;
  Delete(request: DeletePositionRequest): Promise<Empty>;
  List(request: ListPositionRequest): Promise<ListPositionResponse>;
  BatchCreate(request: BatchCreatePositionsRequest): Promise<BatchCreatePositionsResponse>;
}

export interface RoleService {
  Create(request: CreateRoleRequest): Promise<Role>;
  Get(request: GetRoleRequest): Promise<Role>;
  Update(request: UpdateRoleRequest): Promise<Role>;
  Delete(request: DeleteRoleRequest): Promise<Empty>;
  List(request: ListRoleRequest): Promise<ListRoleResponse>;
  BatchCreate(request: BatchCreateRolesRequest): Promise<BatchCreateRolesResponse>;
}

export interface StreetService {
  Create(request: CreateStreetRequest): Promise<Street>;
  Get(request: GetStreetRequest): Promise<Street>;
  Update(request: UpdateStreetRequest): Promise<Street>;
  Delete(request: DeleteStreetRequest): Promise<Empty>;
  List(request: ListStreetRequest): Promise<ListStreetResponse>;
  BatchCreate(request: BatchCreateStreetsRequest): Promise<BatchCreateStreetsResponse>;
}

export interface SysApiService {
  Create(request: CreateSysApiRequest): Promise<SysApi>;
  Get(request: GetSysApiRequest): Promise<SysApi>;
  Update(request: UpdateSysApiRequest): Promise<SysApi>;
  Delete(request: DeleteSysApiRequest): Promise<Empty>;
  List(request: ListSysApiRequest): Promise<ListSysApiResponse>;
  BatchCreate(request: BatchCreateSysApisRequest): Promise<BatchCreateSysApisResponse>;
}

export interface UserService {
  Create(request: CreateUserRequest): Promise<User>;
  Get(request: GetUserRequest): Promise<User>;
  Update(request: UpdateUserRequest): Promise<User>;
  Delete(request: DeleteUserRequest): Promise<Empty>;
  List(request: ListUserRequest): Promise<ListUserResponse>;
  BatchCreate(request: BatchCreateUsersRequest): Promise<BatchCreateUsersResponse>;
}

export interface VillageService {
  Create(request: CreateVillageRequest): Promise<Village>;
  Get(request: GetVillageRequest): Promise<Village>;
  Update(request: UpdateVillageRequest): Promise<Village>;
  Delete(request: DeleteVillageRequest): Promise<Empty>;
  List(request: ListVillageRequest): Promise<ListVillageResponse>;
  BatchCreate(request: BatchCreateVillagesRequest): Promise<BatchCreateVillagesResponse>;
}
